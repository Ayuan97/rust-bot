import express from 'express';
import { createServer } from 'http';
import cors from 'cors';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { existsSync, mkdirSync } from 'fs';

import websocketService from './services/websocket.service.js';
import fcmService from './services/fcm.service.js';
import configStorage from './models/config.model.js';
import storage from './models/storage.model.js';
import rustPlusService from './services/rustplus.service.js';
import battlemetricsService from './services/battlemetrics.service.js';

import serverRoutes from './routes/server.routes.js';
import pairingRoutes from './routes/pairing.routes.js';

// Âä†ËΩΩÁéØÂ¢ÉÂèòÈáè
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Á°Æ‰øùÊï∞ÊçÆÁõÆÂΩïÂ≠òÂú®
const dataDir = join(__dirname, '../data');
if (!existsSync(dataDir)) {
  mkdirSync(dataDir, { recursive: true });
}

const app = express();
const server = createServer(app);

// ‰∏≠Èó¥‰ª∂
app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:5173',
  credentials: true
}));
app.use(express.json());

// Ë∑ØÁî±
app.use('/api/servers', serverRoutes);
app.use('/api/pairing', pairingRoutes);

// ÂÅ•Â∫∑Ê£ÄÊü•
app.get('/api/health', (req, res) => {
  res.json({ status: 'ok', timestamp: Date.now() });
});

// ÂàùÂßãÂåñ WebSocket
websocketService.initialize(server, process.env.FRONTEND_URL || 'http://localhost:5173');

// ÂàùÂßãÂåñ FCM ÊúçÂä°
let fcmInitialized = false;
const initializeFCM = async () => {
  try {
    console.log('\nüîê ÂàùÂßãÂåñ FCM ÊúçÂä°...\n');

    // Âè™Ê≥®ÂÜå‰∏ÄÊ¨°‰∫ã‰ª∂ÁõëÂê¨Âô®ÔºåÈÅøÂÖçÈáçÂ§çÁõëÂê¨
    if (!fcmInitialized) {
      fcmInitialized = true;
      
      // È¶ñÂÖàÊ≥®ÂÜåÊâÄÊúâ‰∫ã‰ª∂ÁõëÂê¨Âô®ÔºàÂøÖÈ°ªÂú®ÂêØÂä®ÁõëÂê¨‰πãÂâçÊ≥®ÂÜåÔºâ
      // ÁõëÂê¨ÊúçÂä°Âô®ÈÖçÂØπ‰∫ã‰ª∂
      fcmService.on('server:paired', async (serverInfo) => {
      console.log('üéÆ Êñ∞ÊúçÂä°Âô®ÈÖçÂØπ:', serverInfo.name);

      // ‰øùÂ≠òÊúçÂä°Âô®‰ø°ÊÅØ
      try {
        storage.addServer({
          id: serverInfo.id,
          name: serverInfo.name,
          ip: serverInfo.ip,
          port: serverInfo.port,
          playerId: serverInfo.playerId,
          playerToken: serverInfo.playerToken,
          battlemetricsId: null, // Á®çÂêéÂºÇÊ≠•Ëé∑Âèñ
        });

        console.log('‚úÖ ÊúçÂä°Âô®‰ø°ÊÅØÂ∑≤‰øùÂ≠ò');
      } catch (error) {
        console.error('‚ùå ‰øùÂ≠òÊúçÂä°Âô®Â§±Ë¥•:', error);
        return;
      }

      // ÈÄöÁü•ÂâçÁ´ØÔºàÊó†ËÆ∫ËøûÊé•ÊòØÂê¶ÊàêÂäüÔºâ
      websocketService.broadcast('server:paired', serverInfo);

      // Âú®ÂêéÂè∞ÂºÇÊ≠•Êü•Êâæ Battlemetrics IDÔºà‰∏çÈòªÂ°ûÈÖçÂØπÊµÅÁ®ãÔºâ
      setImmediate(async () => {
        try {
          console.log('üîç ÂêéÂè∞Êü•Êâæ Battlemetrics ‰ø°ÊÅØ...');
          const battlemetricsId = await battlemetricsService.searchServerByAddress(serverInfo.ip, serverInfo.port);
          if (battlemetricsId) {
            storage.updateServer(serverInfo.id, { battlemetrics_id: battlemetricsId });
            console.log('‚úÖ Battlemetrics ID Â∑≤Êõ¥Êñ∞:', battlemetricsId);
          }
        } catch (error) {
          console.error('‚ùå Êü•Êâæ Battlemetrics Â§±Ë¥•:', error.message);
        }
      });

      // Â∞ùËØïËá™Âä®ËøûÊé•Âà∞ÊúçÂä°Âô®Ôºà‰∏çÈòªÂ°ûÔºâ
      try {
        console.log('üîå Â∞ùËØïËøûÊé•Âà∞ÊúçÂä°Âô®...');
        await rustPlusService.connect({
          serverId: serverInfo.id,
          ip: serverInfo.ip,
          port: serverInfo.port,
          playerId: serverInfo.playerId,
          playerToken: serverInfo.playerToken,
        });

        console.log('‚úÖ Â∑≤Ëá™Âä®ËøûÊé•Âà∞ÊúçÂä°Âô®');
        websocketService.broadcast('server:connected', { serverId: serverInfo.id });
      } catch (error) {
        console.error('‚ö†Ô∏è  Ëá™Âä®ËøûÊé•ÊúçÂä°Âô®Â§±Ë¥•:', error.message);
        console.log('üí° ÊèêÁ§∫: ÂèØ‰ª•Á®çÂêéÂú® Web ÁïåÈù¢ÊâãÂä®ËøûÊé•');
      }
    });

    // ÁõëÂê¨ËÆæÂ§áÈÖçÂØπ‰∫ã‰ª∂
    fcmService.on('entity:paired', (entityInfo) => {
      console.log('üîå Êñ∞ËÆæÂ§áÈÖçÂØπ:', entityInfo);

      // ‰øùÂ≠òËÆæÂ§á‰ø°ÊÅØ
      try {
        storage.addDevice({
          serverId: entityInfo.serverId,
          entityId: entityInfo.entityId,
          name: entityInfo.entityName || `ËÆæÂ§á ${entityInfo.entityId}`,
          type: entityInfo.entityType || 'unknown',
        });

        console.log('‚úÖ ËÆæÂ§á‰ø°ÊÅØÂ∑≤‰øùÂ≠ò');

        // ÈÄöËøá WebSocket ÈÄöÁü•ÂâçÁ´Ø
        websocketService.broadcast('entity:paired', entityInfo);
      } catch (error) {
        console.error('‚ùå ‰øùÂ≠òËÆæÂ§áÂ§±Ë¥•:', error);
      }
    });

    // ÁõëÂê¨Áé©ÂÆ∂ÁôªÂΩï‰∫ã‰ª∂
    fcmService.on('player:login', (loginInfo) => {
      console.log('üë§ Áé©ÂÆ∂ÁôªÂΩï:', loginInfo);
      websocketService.broadcast('player:login', loginInfo);
    });

    // ÁõëÂê¨Áé©ÂÆ∂Ê≠ª‰∫°‰∫ã‰ª∂
    fcmService.on('player:death', (deathInfo) => {
      console.log('üíÄ Áé©ÂÆ∂Ê≠ª‰∫°:', deathInfo);
      websocketService.broadcast('player:death', deathInfo);
    });

    // ÁõëÂê¨Êô∫ËÉΩË≠¶Êä•
    fcmService.on('alarm', (alarmInfo) => {
      console.log('üö® Êô∫ËÉΩË≠¶Êä•:', alarmInfo);
      websocketService.broadcast('alarm', alarmInfo);
    });

    // ÁõëÂê¨ÂÖ∂‰ªñÈÄöÁü•
    fcmService.on('notification', (notificationInfo) => {
      console.log('üì¨ ÈÄöÁü•:', notificationInfo);
      websocketService.broadcast('notification', notificationInfo);
    });
    }

    // Âä†ËΩΩÂá≠ËØÅÂπ∂ÂêØÂä®ÁõëÂê¨
    // 1. ‰ºòÂÖà‰ΩøÁî®Êï∞ÊçÆÂ∫ì‰∏≠Â∑≤‰øùÂ≠òÁöÑÂá≠ËØÅ
    const savedCredentials = configStorage.getFCMCredentials();
    if (savedCredentials) {
      console.log('‚úÖ ÊâæÂà∞Â∑≤‰øùÂ≠òÁöÑ FCM Âá≠ËØÅ');
      fcmService.loadCredentials(savedCredentials);
      await fcmService.startListening();
      console.log('');
      return;
    }

    // 2. Â∞ùËØï‰ªé rustplus CLI Âä†ËΩΩÂá≠ËØÅ
    console.log('üìÇ Â∞ùËØï‰ªé rustplus CLI Âä†ËΩΩÂá≠ËØÅ...');
    const fromCLI = await fcmService.loadFromRustPlusCLI();
    if (fromCLI) {
      configStorage.saveFCMCredentials(fcmService.getCredentials());
      await fcmService.startListening();
      console.log('');
      return;
    }

    // 3. ÊèêÁ§∫Áî®Êà∑ÈúÄË¶ÅÈÖçÁΩÆÂá≠ËØÅ
    console.log('\n‚ö†Ô∏è  Êú™ÊâæÂà∞ FCM Âá≠ËØÅÔºåÈúÄË¶ÅÂÖàËé∑ÂèñÂá≠ËØÅÊâçËÉΩ‰ΩøÁî®ÈÖçÂØπÂäüËÉΩ\n');
    console.log('üí° ÊñπÂºè 1 - ‰ΩøÁî® rustplus CLIÔºàÊé®ËçêÔºâ:');
    console.log('   1. ËøêË°å: npm install -g @liamcottle/rustplus.js');
    console.log('   2. ËøêË°å: rustplus-pairing-server');
    console.log('   3. Âú®ÊâãÊú∫ Rust+ App ‰∏≠Êâ´Êèè‰∫åÁª¥Á†Å');
    console.log('   4. Âá≠ËØÅ‰ºöËá™Âä®‰øùÂ≠òÂà∞ ~/.rustplus/credentials');
    console.log('   5. ÈáçÂêØÊú¨È°πÁõÆÔºå‰ºöËá™Âä®Âä†ËΩΩÂá≠ËØÅ\n');
    console.log('üí° ÊñπÂºè 2 - ÈÄöËøá Web ÁïåÈù¢ÊâãÂä®ËæìÂÖ•:');
    console.log('   ËÆøÈóÆ http://localhost:5173 ÁÇπÂáª"ËæìÂÖ•Âá≠ËØÅ"\n');
    console.log('üí° ÊñπÂºè 3 - ‰ΩøÁî® /api/pairing/startÔºà‰∏çÊé®ËçêÔºâ:');
    console.log('   ‰ºöÁîüÊàêÊñ∞Âá≠ËØÅÔºå‰ΩÜÊú™ÂÖ≥ËÅî Steam Ë¥¶Âè∑ÔºåÊó†Ê≥ïÊé•Êî∂Êé®ÈÄÅ\n');
  } catch (error) {
    console.error('‚ùå FCM ÂàùÂßãÂåñÂ§±Ë¥•:', error);
  }
};

// ËÆæÁΩÆÁé©ÂÆ∂‰∫ã‰ª∂Ëá™Âä®ÈÄöÁü•
const setupPlayerEventNotifications = () => {
  const commandsService = rustPlusService.getCommandsService();

  // Áé©ÂÆ∂Ê≠ª‰∫°Ëá™Âä®ÈÄöÁü•
  rustPlusService.on('player:died', async (data) => {
    try {
      const settings = commandsService.getServerSettings(data.serverId);
      if (settings.deathNotify) {
        const message = `üíÄ ${data.name} Âú® (${Math.round(data.x)}, ${Math.round(data.y)}) Ê≠ª‰∫°‰∫ÜÔºÅ`;
        await rustPlusService.sendTeamMessage(data.serverId, message);
        console.log(`üì® Â∑≤ÂèëÈÄÅÊ≠ª‰∫°ÈÄöÁü•: ${data.name}`);
      }
    } catch (error) {
      console.error('‚ùå ÂèëÈÄÅÊ≠ª‰∫°ÈÄöÁü•Â§±Ë¥•:', error.message);
    }
  });

  // Áé©ÂÆ∂ÈáçÁîüËá™Âä®ÈÄöÁü•
  rustPlusService.on('player:spawned', async (data) => {
    try {
      const settings = commandsService.getServerSettings(data.serverId);
      if (settings.spawnNotify) {
        const message = `‚ú® ${data.name} ÈáçÁîü‰∫ÜÔºÅ`;
        await rustPlusService.sendTeamMessage(data.serverId, message);
        console.log(`üì® Â∑≤ÂèëÈÄÅÈáçÁîüÈÄöÁü•: ${data.name}`);
      }
    } catch (error) {
      console.error('‚ùå ÂèëÈÄÅÈáçÁîüÈÄöÁü•Â§±Ë¥•:', error.message);
    }
  });

  console.log('‚úÖ Áé©ÂÆ∂‰∫ã‰ª∂Ëá™Âä®ÈÄöÁü•Â∑≤ÂêØÁî®ÔºàÂèØÈÄöËøá !notify ÂëΩ‰ª§ÊéßÂà∂Ôºâ');
};

// ÂêØÂä®ÊúçÂä°Âô®
const PORT = process.env.PORT || 3000;
server.listen(PORT, async () => {
  console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   üéÆ Rust+ Web Dashboard Backend    ‚ïë
‚ïë                                       ‚ïë
‚ïë   Server: http://localhost:${PORT}     ‚ïë
‚ïë   Status: ‚úÖ Running                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
  `);

  // ÂàùÂßãÂåñ FCM
  await initializeFCM();

  // ËÆæÁΩÆÁé©ÂÆ∂‰∫ã‰ª∂Ëá™Âä®ÈÄöÁü•
  setupPlayerEventNotifications();
});

// ‰ºòÈõÖÂÖ≥Èó≠ÂáΩÊï∞
const gracefulShutdown = async (signal) => {
  console.log(`\nÊî∂Âà∞ ${signal} ‰ø°Âè∑ÔºåÊ≠£Âú®ÂÖ≥Èó≠...`);
  
  try {
    // 1. ÂÖ≥Èó≠ÊâÄÊúâ Rust+ ËøûÊé•
    const connectedServers = rustPlusService.getConnectedServers();
    console.log(`Ê≠£Âú®Êñ≠ÂºÄ ${connectedServers.length} ‰∏™ Rust+ ËøûÊé•...`);
    for (const serverId of connectedServers) {
      await rustPlusService.disconnect(serverId);
    }
    
    // 2. ÂÖ≥Èó≠ Socket.IO
    const io = websocketService.getIO();
    if (io) {
      console.log('Ê≠£Âú®ÂÖ≥Èó≠ Socket.IO ËøûÊé•...');
      io.close();
    }
    
    // 3. ÂÖ≥Èó≠ HTTP Server
    console.log('Ê≠£Âú®ÂÖ≥Èó≠ HTTP Server...');
    server.close(() => {
      console.log('‚úÖ ÊúçÂä°Âô®Â∑≤ÂÆâÂÖ®ÂÖ≥Èó≠');
      process.exit(0);
    });
    
    // ËÆæÁΩÆÂº∫Âà∂ÂÖ≥Èó≠Ë∂ÖÊó∂Ôºà10ÁßíÔºâ
    setTimeout(() => {
      console.error('‚ùå Âº∫Âà∂ÂÖ≥Èó≠ÔºàË∂ÖÊó∂Ôºâ');
      process.exit(1);
    }, 10000);
    
  } catch (error) {
    console.error('‚ùå ÂÖ≥Èó≠ËøáÁ®ãÂá∫Èîô:', error.message);
    process.exit(1);
  }
};

// ÁõëÂê¨ÂÖ≥Èó≠‰ø°Âè∑
process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));
